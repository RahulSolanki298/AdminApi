// <auto-generated />
using System;
using AdminApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AdminApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221003062622_studentpassword")]
    partial class studentpassword
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AdminApi.Models.Menu.AppMenu", b =>
                {
                    b.Property<int>("MenuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'11', '1', '', '', 'False', '1'");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IconClass")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMigrationData")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IsSubMenu")
                        .HasColumnType("int");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MenuTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ParentID")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("MenuID");

                    b.ToTable("Menu");

                    b.HasData(
                        new
                        {
                            MenuID = 1,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(6124),
                            IconClass = "fas fa-home",
                            IsActive = true,
                            IsMigrationData = true,
                            IsSubMenu = 0,
                            MenuTitle = "Dashboard",
                            ParentID = 0,
                            SortOrder = 1,
                            URL = "/DashBoard/Index"
                        },
                        new
                        {
                            MenuID = 2,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(6129),
                            IconClass = "fas fa-ellipsis-v",
                            IsActive = true,
                            IsMigrationData = true,
                            IsSubMenu = 1,
                            MenuTitle = "Menu",
                            ParentID = 0,
                            SortOrder = 2,
                            URL = ""
                        },
                        new
                        {
                            MenuID = 3,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(6131),
                            IconClass = "",
                            IsActive = true,
                            IsMigrationData = true,
                            IsSubMenu = 0,
                            MenuTitle = "Menu List",
                            ParentID = 2,
                            SortOrder = 0,
                            URL = "/Menu/MenuList"
                        },
                        new
                        {
                            MenuID = 4,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(6132),
                            IconClass = "",
                            IsActive = true,
                            IsMigrationData = true,
                            IsSubMenu = 0,
                            MenuTitle = "Menu Group List",
                            ParentID = 2,
                            SortOrder = 0,
                            URL = "/Menu/MenuGroupList"
                        },
                        new
                        {
                            MenuID = 5,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(6136),
                            IconClass = "fas fa-user",
                            IsActive = true,
                            IsMigrationData = true,
                            IsSubMenu = 1,
                            MenuTitle = "User",
                            ParentID = 0,
                            SortOrder = 3,
                            URL = ""
                        },
                        new
                        {
                            MenuID = 6,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(6139),
                            IconClass = "",
                            IsActive = true,
                            IsMigrationData = true,
                            IsSubMenu = 0,
                            MenuTitle = "User List",
                            ParentID = 5,
                            SortOrder = 0,
                            URL = "/User/UserList"
                        },
                        new
                        {
                            MenuID = 7,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(6147),
                            IconClass = "",
                            IsActive = true,
                            IsMigrationData = true,
                            IsSubMenu = 0,
                            MenuTitle = "Role List",
                            ParentID = 5,
                            SortOrder = 0,
                            URL = "/User/RoleList"
                        },
                        new
                        {
                            MenuID = 8,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(6152),
                            IconClass = "",
                            IsActive = true,
                            IsMigrationData = true,
                            IsSubMenu = 0,
                            MenuTitle = "Profile",
                            ParentID = 5,
                            SortOrder = 0,
                            URL = "/User/UserProfile"
                        },
                        new
                        {
                            MenuID = 9,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(6155),
                            IconClass = "fas fa-wrench",
                            IsActive = true,
                            IsMigrationData = true,
                            IsSubMenu = 1,
                            MenuTitle = "Settings",
                            ParentID = 0,
                            SortOrder = 4,
                            URL = ""
                        },
                        new
                        {
                            MenuID = 10,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(6158),
                            IconClass = "",
                            IsActive = true,
                            IsMigrationData = true,
                            IsSubMenu = 0,
                            MenuTitle = "Change Password",
                            ParentID = 9,
                            SortOrder = 0,
                            URL = "/User/ChangePassword"
                        });
                });

            modelBuilder.Entity("AdminApi.Models.Menu.MenuGroup", b =>
                {
                    b.Property<int>("MenuGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'3', '1', '', '', 'False', '1'");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMigrationData")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MenuGroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("MenuGroupID");

                    b.ToTable("MenuGroup");

                    b.HasData(
                        new
                        {
                            MenuGroupID = 1,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(3674),
                            IsActive = true,
                            IsMigrationData = true,
                            MenuGroupName = "Super Admin Group"
                        },
                        new
                        {
                            MenuGroupID = 2,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(3684),
                            IsActive = true,
                            IsMigrationData = true,
                            MenuGroupName = "User Group"
                        });
                });

            modelBuilder.Entity("AdminApi.Models.Menu.MenuGroupWiseMenuMapping", b =>
                {
                    b.Property<int>("MenuGroupWiseMenuMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'11', '1', '', '', 'False', '1'");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMigrationData")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MenuGroupId")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.HasKey("MenuGroupWiseMenuMappingId");

                    b.ToTable("MenuGroupWiseMenuMapping");

                    b.HasData(
                        new
                        {
                            MenuGroupWiseMenuMappingId = 1,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(6695),
                            IsActive = true,
                            IsMigrationData = true,
                            MenuGroupId = 1,
                            MenuId = 1
                        },
                        new
                        {
                            MenuGroupWiseMenuMappingId = 2,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(6698),
                            IsActive = true,
                            IsMigrationData = true,
                            MenuGroupId = 1,
                            MenuId = 3
                        },
                        new
                        {
                            MenuGroupWiseMenuMappingId = 3,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(6699),
                            IsActive = true,
                            IsMigrationData = true,
                            MenuGroupId = 1,
                            MenuId = 4
                        },
                        new
                        {
                            MenuGroupWiseMenuMappingId = 4,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(6700),
                            IsActive = true,
                            IsMigrationData = true,
                            MenuGroupId = 1,
                            MenuId = 6
                        },
                        new
                        {
                            MenuGroupWiseMenuMappingId = 5,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(6702),
                            IsActive = true,
                            IsMigrationData = true,
                            MenuGroupId = 1,
                            MenuId = 7
                        },
                        new
                        {
                            MenuGroupWiseMenuMappingId = 6,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(6703),
                            IsActive = true,
                            IsMigrationData = true,
                            MenuGroupId = 1,
                            MenuId = 8
                        },
                        new
                        {
                            MenuGroupWiseMenuMappingId = 7,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(6704),
                            IsActive = true,
                            IsMigrationData = true,
                            MenuGroupId = 1,
                            MenuId = 10
                        },
                        new
                        {
                            MenuGroupWiseMenuMappingId = 8,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(6705),
                            IsActive = true,
                            IsMigrationData = true,
                            MenuGroupId = 2,
                            MenuId = 1
                        },
                        new
                        {
                            MenuGroupWiseMenuMappingId = 9,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(6706),
                            IsActive = true,
                            IsMigrationData = true,
                            MenuGroupId = 2,
                            MenuId = 8
                        },
                        new
                        {
                            MenuGroupWiseMenuMappingId = 10,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(6707),
                            IsActive = true,
                            IsMigrationData = true,
                            MenuGroupId = 2,
                            MenuId = 10
                        });
                });

            modelBuilder.Entity("AdminApi.Models.School.AcademicCalendar", b =>
                {
                    b.Property<int>("AcademicCalendarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AcademicCalendarPath")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("AcademyYearId")
                        .HasColumnType("int");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("AcademicCalendarId");

                    b.ToTable("AcademicCalendar");
                });

            modelBuilder.Entity("AdminApi.Models.School.AcademyYear", b =>
                {
                    b.Property<int>("AcademyYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AcademyYearName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("AcademyYearId");

                    b.ToTable("AcademyYears");
                });

            modelBuilder.Entity("AdminApi.Models.School.BookOrder", b =>
                {
                    b.Property<int>("BookOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BillTo")
                        .HasColumnType("longtext");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<decimal>("OrderAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("BookOrderId");

                    b.ToTable("BookOrder");
                });

            modelBuilder.Entity("AdminApi.Models.School.ClassMaster", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.ToTable("ClassMasters");
                });

            modelBuilder.Entity("AdminApi.Models.School.ClassroomDetails", b =>
                {
                    b.Property<int>("ClassroomDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AcademyYearId")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassTeacher")
                        .HasColumnType("int");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<int>("SchoolClassDivisionId")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int?>("SubSubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectTeacher")
                        .HasColumnType("int");

                    b.HasKey("ClassroomDetailId");

                    b.HasIndex("AcademyYearId");

                    b.ToTable("ClassroomDetails");
                });

            modelBuilder.Entity("AdminApi.Models.School.eBook", b =>
                {
                    b.Property<int>("eBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClassMasterId")
                        .HasColumnType("int");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<int?>("SubSubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("TeachingMediumId")
                        .HasColumnType("int");

                    b.Property<string>("eBookCoverAudio")
                        .HasColumnType("longtext");

                    b.Property<string>("eBookCoverPdf")
                        .HasColumnType("longtext");

                    b.Property<string>("eBookCoverVideo")
                        .HasColumnType("longtext");

                    b.Property<int>("eBookDisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("eBookTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("eBookId");

                    b.ToTable("eBook");
                });

            modelBuilder.Entity("AdminApi.Models.School.eBookChapter", b =>
                {
                    b.Property<int>("eBookChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ChapterAudio")
                        .HasColumnType("longtext");

                    b.Property<int>("ChapterDisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ChapterPdf")
                        .HasColumnType("longtext");

                    b.Property<string>("ChapterVideo")
                        .HasColumnType("longtext");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<string>("eBookChapterTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("eBookId")
                        .HasColumnType("int");

                    b.HasKey("eBookChapterId");

                    b.ToTable("eBookChapter");
                });

            modelBuilder.Entity("AdminApi.Models.School.NoticeDetail", b =>
                {
                    b.Property<int>("NoticeDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AcademyYearId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicableTo")
                        .HasColumnType("longtext");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Classes")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<int>("NoticeTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Topic")
                        .HasColumnType("longtext");

                    b.HasKey("NoticeDetailId");

                    b.ToTable("NoticeDetail");
                });

            modelBuilder.Entity("AdminApi.Models.School.NoticeType", b =>
                {
                    b.Property<int>("NoticeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<string>("NoticeTypeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("NoticeTypeId");

                    b.ToTable("NoticeType");
                });

            modelBuilder.Entity("AdminApi.Models.School.ParentStudent", b =>
                {
                    b.Property<int>("ParentStudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FatherId")
                        .HasColumnType("int");

                    b.Property<int>("GuardianId")
                        .HasColumnType("int");

                    b.Property<int>("MotherId")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("ParentStudentId");

                    b.ToTable("ParentStudent");
                });

            modelBuilder.Entity("AdminApi.Models.School.School", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("AcademicEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("AcademicStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DashboardPicPath")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("EstablishmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GeoLocation")
                        .HasColumnType("longtext");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<string>("SchoolAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SchoolCity")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SchoolCode")
                        .HasColumnType("longtext");

                    b.Property<int?>("SchoolCoordinatorId")
                        .HasColumnType("int");

                    b.Property<string>("SchoolEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("SchoolGSTNo")
                        .HasColumnType("longtext");

                    b.Property<string>("SchoolLogo1Path")
                        .HasColumnType("longtext");

                    b.Property<string>("SchoolLogo2Path")
                        .HasColumnType("longtext");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("SchoolOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("SchoolPAN")
                        .HasColumnType("longtext");

                    b.Property<string>("SchoolPhone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SchoolPinCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("SchoolPrincipleId")
                        .HasColumnType("int");

                    b.Property<string>("SchoolState")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SchoolTrustName")
                        .HasColumnType("longtext");

                    b.Property<string>("SchoolWebsite")
                        .HasColumnType("longtext");

                    b.HasKey("SchoolId");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("AdminApi.Models.School.SchoolBookPrice", b =>
                {
                    b.Property<int>("SchoolBookPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AcademyYearId")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("SchoolBookPriceId");

                    b.ToTable("SchoolBookPrice");
                });

            modelBuilder.Entity("AdminApi.Models.School.SchoolClassDivision", b =>
                {
                    b.Property<int>("SchoolClassDivisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AcademyYearId")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Division")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("SchoolClassDivisionId");

                    b.ToTable("schoolClassDivisions");
                });

            modelBuilder.Entity("AdminApi.Models.School.StudentPassword", b =>
                {
                    b.Property<int>("StudentPasswordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ChoiceId1")
                        .HasColumnType("int");

                    b.Property<int>("ChoiceId2")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("StudentPasswordId");

                    b.ToTable("StudentPassword");
                });

            modelBuilder.Entity("AdminApi.Models.School.StudentPasswordImages", b =>
                {
                    b.Property<int>("StudentPasswordImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("StudentPasswordImageCategory")
                        .HasColumnType("longtext");

                    b.Property<string>("StudentPasswordImageName")
                        .HasColumnType("longtext");

                    b.Property<string>("StudentPasswordImagePath")
                        .HasColumnType("longtext");

                    b.HasKey("StudentPasswordImageId");

                    b.ToTable("StudentPasswordImages");
                });

            modelBuilder.Entity("AdminApi.Models.School.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("AdminApi.Models.School.SubSubjects", b =>
                {
                    b.Property<int>("SubSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<string>("SubSubjectName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("SubSubjectId");

                    b.ToTable("SubSubjects");
                });

            modelBuilder.Entity("AdminApi.Models.School.TeachingMedium", b =>
                {
                    b.Property<int>("TeachingMediumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<string>("TeachingMediumName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TeachingMediumId");

                    b.ToTable("TeachingMedia");
                });

            modelBuilder.Entity("AdminApi.Models.School.TeachingPlan", b =>
                {
                    b.Property<int>("TeachingPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AcademyYearId")
                        .HasColumnType("int");

                    b.Property<int>("DayNumber")
                        .HasColumnType("int");

                    b.Property<string>("TeachingPlanName")
                        .HasColumnType("longtext");

                    b.Property<int>("eBookChapterId")
                        .HasColumnType("int");

                    b.HasKey("TeachingPlanId");

                    b.ToTable("TeachingPlan");
                });

            modelBuilder.Entity("AdminApi.Models.User.LogHistory", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("LogCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LogInTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LogOutTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LogId");

                    b.ToTable("LogHistory");
                });

            modelBuilder.Entity("AdminApi.Models.User.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'3', '1', '', '', 'False', '1'");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMigrationData")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MenuGroupId")
                        .HasColumnType("int");

                    b.Property<string>("RoleDesc")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserRoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserRoleId = 1,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(4317),
                            IsActive = true,
                            IsMigrationData = true,
                            MenuGroupId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            UserRoleId = 2,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(4320),
                            IsActive = true,
                            IsMigrationData = true,
                            MenuGroupId = 2,
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("AdminApi.Models.User.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'3', '1', '', '', 'False', '1'");

                    b.Property<int?>("AcademyYearId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AccessTill")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("AdmissionCode")
                        .HasColumnType("longtext");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateofAdmission")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("FirstTimeLogin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("IsEmployee")
                        .HasColumnType("int");

                    b.Property<int?>("IsFather")
                        .HasColumnType("int");

                    b.Property<int?>("IsGuardian")
                        .HasColumnType("int");

                    b.Property<bool>("IsMigrationData")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("IsMother")
                        .HasColumnType("int");

                    b.Property<bool>("IsPasswordChange")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("IsStudent")
                        .HasColumnType("int");

                    b.Property<int?>("IsTeacher")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastPasswordChangeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PasswordChangedBy")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolClassDivisionId")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AddedBy = 1,
                            CityId = 0,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(5296),
                            FirstName = "John",
                            IsActive = true,
                            IsMigrationData = true,
                            IsPasswordChange = false,
                            LastName = "Doe",
                            Password = "admin@2020",
                            UserName = "admin@2020",
                            UserRoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            AddedBy = 1,
                            CityId = 0,
                            DateAdded = new DateTime(2022, 10, 3, 11, 56, 21, 335, DateTimeKind.Local).AddTicks(5300),
                            FirstName = "Helen",
                            IsActive = true,
                            IsMigrationData = true,
                            IsPasswordChange = false,
                            LastName = "Smith",
                            Password = "user@2020",
                            UserName = "user@2020",
                            UserRoleId = 2
                        });
                });

            modelBuilder.Entity("AdminApi.Models.School.ClassroomDetails", b =>
                {
                    b.HasOne("AdminApi.Models.School.AcademyYear", "AcademyYear")
                        .WithMany()
                        .HasForeignKey("AcademyYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademyYear");
                });
#pragma warning restore 612, 618
        }
    }
}
